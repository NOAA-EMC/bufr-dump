# Set sorc/ -wide compiler flags.
if(CMAKE_Fortran_COMPILER_ID MATCHES "^(Intel)$")
  set(CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} -g -traceback")
  set(CMAKE_Fortran_FLAGS_RELEASE "-O3")
  set(CMAKE_Fortran_FLAGS_DEBUG "-O0 -check -check noarg_temp_created -check nopointer -fp-stack-check -fstack-protector-all -fpe0 -debug -ftrapuv")
elseif(CMAKE_Fortran_COMPILER_ID MATCHES "^(GNU)$")
  set(CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} -g -fbacktrace -std=legacy -fdollar-ok")
  set(CMAKE_Fortran_FLAGS_RELEASE "-O3")
  set(CMAKE_Fortran_FLAGS_DEBUG "-O0 -ggdb -fno-unsafe-math-optimizations -frounding-math -fsignaling-nans -ffpe-trap=invalid,zero,overflow -fbounds-check")
  if(${CMAKE_Fortran_COMPILER_VERSION} VERSION_GREATER_EQUAL 10)
    set(CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} -fallow-argument-mismatch -fallow-invalid-boz")
  endif()
endif()

# Find packages.
find_package(bacio REQUIRED)
find_package(w3emc REQUIRED)
find_package(bufr REQUIRED)

# Build code.
add_subdirectory(bufr_chkbfr.fd)
add_subdirectory(bufr_combfr.fd)
add_subdirectory(bufr_dcodwindsat.fd)
add_subdirectory(bufr_dumpmd.fd)
add_subdirectory(bufr_dupair.fd)
add_subdirectory(bufr_dupcman.fd)
add_subdirectory(bufr_dupcor.fd)
add_subdirectory(bufr_dupmar.fd)
add_subdirectory(bufr_dupmrg.fd)
add_subdirectory(bufr_duprad.fd)
add_subdirectory(bufr_dupsat.fd)
add_subdirectory(bufr_dupshp.fd)
add_subdirectory(bufr_dupsst.fd)
add_subdirectory(bufr_dupsyp.fd)
add_subdirectory(bufr_duptac.fd)
add_subdirectory(bufr_edtbfr.fd)
add_subdirectory(bufr_geofil.fd)
add_subdirectory(bufr_quipc.fd)
add_subdirectory(bufr_raddate.fd)
add_subdirectory(bufr_supertmi.fd)
add_subdirectory(prepobs_prepssmi.fd)
add_subdirectory(wave_dcodquikscat.fd)
